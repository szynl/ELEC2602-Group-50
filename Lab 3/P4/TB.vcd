$date
	Thu Mar 27 17:05:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TB $end
$var wire 7 ! output_7seg2 [6:0] $end
$var wire 7 " output_7seg1 [6:0] $end
$var wire 1 # error $end
$var reg 4 $ count [3:0] $end
$var reg 4 % input_binarya [3:0] $end
$var reg 4 & input_binaryb [3:0] $end
$scope module instantiate_BCD_Add $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 ) cin $end
$var wire 1 # error $end
$var wire 4 * sum [3:0] $end
$var wire 7 + d2 [6:0] $end
$var wire 7 , d1 [6:0] $end
$var wire 1 - carry_out $end
$scope module adder $end
$var wire 4 . a [3:0] $end
$var wire 4 / b [3:0] $end
$var wire 1 ) cin $end
$var wire 4 0 s [3:0] $end
$var wire 1 - cout $end
$var wire 1 1 carry3 $end
$var wire 1 2 carry2 $end
$var wire 1 3 carry1 $end
$scope module fa0 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 ) cin $end
$var wire 2 6 sum [1:0] $end
$var wire 1 7 s $end
$var wire 1 3 cout $end
$upscope $end
$scope module fa1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 3 cin $end
$var wire 2 : sum [1:0] $end
$var wire 1 ; s $end
$var wire 1 2 cout $end
$upscope $end
$scope module fa2 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 2 cin $end
$var wire 2 > sum [1:0] $end
$var wire 1 ? s $end
$var wire 1 1 cout $end
$upscope $end
$scope module fa3 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 1 cin $end
$var wire 2 B sum [1:0] $end
$var wire 1 C s $end
$var wire 1 - cout $end
$upscope $end
$upscope $end
$scope module display $end
$var wire 4 D v [3:0] $end
$var reg 7 E d1 [6:0] $end
$var reg 7 F d2 [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b111111 F
b111111 E
b0 D
0C
b0 B
0A
0@
0?
b0 >
0=
0<
0;
b0 :
09
08
07
b0 6
05
04
03
02
01
b0 0
b0 /
b0 .
0-
b111111 ,
b111111 +
b0 *
0)
b0 (
b0 '
b0 &
b0 %
b0 $
0#
b111111 "
b111111 !
$end
#50000
b1011011 !
b1011011 +
b1011011 F
b10 D
b10 *
b10 0
1;
b1 :
13
15
b10 6
14
b1 &
b1 (
b1 /
b1 %
b1 '
b1 .
b1 $
#100000
b1100110 !
b1100110 +
b1100110 F
0;
b100 D
b100 *
b100 0
1?
03
b1 >
12
05
19
b0 6
04
b10 :
18
b10 &
b10 (
b10 /
b10 %
b10 '
b10 .
b10 $
#150000
b1111101 !
b1111101 +
b1111101 F
b110 D
b110 *
b110 0
1;
b11 :
13
15
b10 6
14
b11 &
b11 (
b11 /
b11 %
b11 '
b11 .
b11 $
#200000
b1111111 !
b1111111 +
b1111111 F
0?
0;
b1000 D
b1000 *
b1000 0
1C
02
03
b1 B
11
05
09
1=
b0 6
04
b0 :
08
b10 >
1<
b100 &
b100 (
b100 /
b100 %
b100 '
b100 .
b100 $
#250000
b111111 !
b111111 +
b111111 F
b110 "
b110 ,
b110 E
b1010 D
b1010 *
b1010 0
1;
b1 :
13
15
b10 6
14
b101 &
b101 (
b101 /
b101 %
b101 '
b101 .
b101 $
#300000
b1011011 !
b1011011 +
b1011011 F
0;
b1100 D
b1100 *
b1100 0
1?
03
b11 >
12
05
19
b0 6
04
b10 :
18
b110 &
b110 (
b110 /
b110 %
b110 '
b110 .
b110 $
#350000
b1111101 !
b1111101 +
b1111101 F
b111111 "
b111111 ,
b111111 E
1;
b110 D
b110 *
b110 0
0C
b11 :
13
b0 B
01
15
0=
b10 6
14
b1 >
0<
b11 &
b11 (
b11 /
b11 %
b11 '
b11 .
b111 $
#400000
b1000 $
#450000
b1001 $
#500000
b1010 $
